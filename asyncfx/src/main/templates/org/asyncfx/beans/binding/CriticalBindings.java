/**
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */
// This file was generated by a tool. Do not edit.
//
package org.asyncfx.beans.binding;

import com.sun.javafx.binding.Logging;
import java.util.List;
import java.util.ArrayList;
import java.util.function.Supplier;
import org.asyncfx.beans.property.AsyncProperty;
import org.asyncfx.beans.property.Critical;
import org.asyncfx.collections.AsyncObservableList;
import org.asyncfx.collections.FXAsyncCollections;

public class CriticalBindings {

    #set($overloads = 8)

    #foreach($i in [1..$overloads])
    #set($last = $i - 1)
    #set($lastMinusOne = $i - 2)
    interface Func$i<
        #foreach($j in [0..$last])
            T$j,
        #end
        R> {
        R apply(
            #if($lastMinusOne >= 0)
                #foreach($j in [0..$lastMinusOne])
                    T$j t$j,
                #end
            #end
            T$last t$last);
    }
    #end

#foreach($type in ["Boolean", "Integer", "Long", "Float", "Double", "String"])
    #foreach($i in [1..$overloads])
    #set($last = $i - 1)
    #set($lastMinusOne = $i - 2)
    public static
    <
    #if($lastMinusOne >= 0)
        #foreach($j in [0..$lastMinusOne])
            T$j,
        #end
    #end
    T$last
    >
    Async${type}Binding create${type}Binding(
            Func$i<
            #foreach($j in [0..$last])
                T$j,
            #end
            $type> func,
            #if($lastMinusOne >= 0)
                #foreach($j in [0..$lastMinusOne])
                    AsyncProperty<T$j> p$j,
                #end
            #end
            AsyncProperty<T$last> p$last) {
        return new Async${type}Binding() {
            private final Supplier<$type> supplier =
                () -> func.apply(
                    #if($lastMinusOne >= 0)
                        #foreach($j in [0..$lastMinusOne])
                            p${j}.getValue(),
                        #end
                    #end
                    p${last}.getValue());

            {
                super.bind(
                    #if($lastMinusOne >= 0)
                        #foreach($j in [0..$lastMinusOne])
                            p$j,
                        #end
                    #end
                    p$last
                );
            }

            @Override
            public void dispose() {
                super.unbind(
                    #if($lastMinusOne >= 0)
                        #foreach($j in [0..$lastMinusOne])
                            p$j,
                        #end
                    #end
                    p$last
                );
            }

            @Override
        #if($type == "Boolean")
            protected boolean computeValue() {
        #elseif($type == "Integer")
            protected int computeValue() {
        #elseif($type == "Long")
            protected long computeValue() {
        #elseif($type == "Float")
            protected float computeValue() {
        #elseif($type == "Double")
            protected double computeValue() {
        #else
            protected $type computeValue() {
        #end
                try {
                    return Critical.lock(
                        #if($lastMinusOne >= 0)
                            #foreach($j in[0..$lastMinusOne])
                                p$j,
                            #end
                        #end
                        p$last, supplier);
                } catch (Exception ex) {
                    Logging.getLogger().warning("Exception while evaluating binding", ex);
                    #if($type == "Boolean")
                        return false;
                    #elseif($type == "Integer" || $type == "Long" || $type == "Float" || $type == "Double")
                        return 0;
                    #elseif($type == "String")
                        return "";
                    #else
                        return null;
                    #end
                }
            }

            @Override
            public AsyncObservableList<?> getDependencies() {
                List<Object> list = new ArrayList<>($i);
                #foreach($j in [0..$last])
                    list.add(p$j);
                #end
                return FXAsyncCollections.unmodifiableObservableList(list);
            }
        };
    }
    #end
#end

    #foreach($i in [1..$overloads])
    #set($last = $i - 1)
    #set($lastMinusOne = $i - 2)
    public static
    <T,
    #if($lastMinusOne >= 0)
        #foreach($j in [0..$lastMinusOne])
            T$j,
        #end
    #end
    T$last
    >
    AsyncObjectBinding<T> createObjectBinding(
            Func$i<
            #foreach($j in [0..$last])
                T$j,
            #end
            T> func,
            #if($lastMinusOne >= 0)
                #foreach($j in [0..$lastMinusOne])
                    AsyncProperty<T$j> p$j,
                #end
            #end
            AsyncProperty<T$last> p$last) {
        return new AsyncObjectBinding<>() {
            private final Supplier<T> supplier =
                () -> func.apply(
                    #if($lastMinusOne >= 0)
                        #foreach($j in [0..$lastMinusOne])
                            p${j}.getValue(),
                        #end
                    #end
                    p${last}.getValue());

            {
                super.bind(
                    #if($lastMinusOne >= 0)
                        #foreach($j in [0..$lastMinusOne])
                            p$j,
                        #end
                    #end
                    p$last
                );
            }

            @Override
            public void dispose() {
                super.unbind(
                    #if($lastMinusOne >= 0)
                        #foreach($j in [0..$lastMinusOne])
                            p$j,
                        #end
                    #end
                    p$last
                );
            }

            @Override
            protected T computeValue() {
                try {
                    return Critical.lock(
                        #if($lastMinusOne >= 0)
                            #foreach($j in[0..$lastMinusOne])
                                p$j,
                            #end
                        #end
                        p$last, supplier);
                } catch (Exception ex) {
                    Logging.getLogger().warning("Exception while evaluating binding", ex);
                    return null;
                }
            }

            @Override
            public AsyncObservableList<?> getDependencies() {
                List<Object> list = new ArrayList<>($i);
                #foreach($j in [0..$last])
                    list.add(p$j);
                #end
                return FXAsyncCollections.unmodifiableObservableList(list);
                }
            };
        }
    #end

}
