/**
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */
// This file was generated by a tool. Do not edit.
//
package org.asyncfx.beans.property;

import com.sun.javafx.binding.Logging;
import javafx.beans.value.ObservableValue;
import javafx.beans.value.Writable${boxedType}Value;
import org.asyncfx.PublishSource;
import org.asyncfx.beans.binding.BidirectionalValueConverter;
import org.asyncfx.beans.binding.LifecycleValueConverter;

@PublishSource(
    module = "openjfx",
    licenses = {"openjfx", "intel-gpl-classpath-exception"}
)
public abstract class Async${boxedType}Property$!{genericType} extends ReadOnlyAsync${boxedType}Property$!{genericType}
        implements AsyncProperty<${numberType}>, Writable${boxedType}Value$!{genericType} {

    @Override
    public void setValue(${numberType} value) {
#if($boxedType != "Object" && $boxedType != "String")
        if (value == null) {
            Logging.getLogger()
                .fine(
                    "Attempt to set ${primType} property to null, using default value instead.", new NullPointerException());
#if($boxedType == "Boolean")
            set(false);
        } else {
            set(value);
        }
#else
            set(0);
        } else {
            set(value.${primType}Value());
        }
#end
#else
        set(value);
#end
    }

    @Override
    public void bindBidirectional(AsyncProperty<${numberType}> source) {
        AsyncBidirectionalBinding.bind(this, source);
    }

    @Override
    public <U> void bindBidirectional(AsyncProperty<U> source, BidirectionalValueConverter<U, ${numberType}> converter) {
        AsyncBidirectionalBinding.bind(this, source, converter);
    }

    @Override
    public void unbindBidirectional(AsyncProperty<${numberType}> source) {
        AsyncBidirectionalBinding.unbind(this, source);
    }

}
