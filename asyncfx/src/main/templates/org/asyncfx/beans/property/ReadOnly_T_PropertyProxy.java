/**
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */
// This file was generated by a tool. Do not edit.
//
package org.asyncfx.beans.property;

import javafx.beans.InvalidationListener;
import javafx.beans.property.ReadOnly${boxedType}Property;
import javafx.beans.property.ReadOnlyProperty;
import javafx.beans.value.ChangeListener;
import org.asyncfx.beans.binding.ProxyExpressionHelper;

#set($isNumberType = $boxedType == "Integer" || $boxedType == "Long" || $boxedType == "Float" || $boxedType == "Double")

class ReadOnly${boxedType}PropertyProxy$!{genericType} extends ReadOnly${boxedType}Property$!{genericType} {

    @SuppressWarnings({"FieldCanBeLocal", "unused"})
    private final PropertyPath.PropertyPathSegment endpoint;
    private final $primType fallbackValue;
    private ProxyExpressionHelper<$numberType> helper;
    private ReadOnlyProperty<$numberType> peer;

    ReadOnly${boxedType}PropertyProxy(PropertyPath.PropertyPathSegment endpoint, $primType fallbackValue) {
        this.endpoint = endpoint;
        this.fallbackValue = fallbackValue;
    }

    void setPeer(ReadOnlyProperty<$numberType> peer) {
        this.peer = peer;
        ProxyExpressionHelper.setPeer(helper, peer);
    }

    @Override
    public Object getBean() {
        return peer != null ? peer.getBean() : null;
    }

    @Override
    public String getName() {
        return peer != null ? peer.getName() : null;
    }

    @Override
    public $primType get() {
        if (peer == null) {
            return fallbackValue;
        }

#if($boxedType == "Boolean")
        Boolean value = peer.getValue();
        return value != null ? value : false;
#elseif($isNumberType)
        Number value = peer.getValue();
        return value != null ? value.${primType}Value() : 0;
#else
        return peer.getValue();
#end
    }

    @Override
    public void addListener(ChangeListener<? super $numberType> changeListener) {
        helper = ProxyExpressionHelper.addListener(helper, this, peer, changeListener);
    }

    @Override
    public void removeListener(ChangeListener<? super $numberType> changeListener) {
        helper = ProxyExpressionHelper.removeListener(helper, changeListener);
    }

    @Override
    public void addListener(InvalidationListener invalidationListener) {
        helper = ProxyExpressionHelper.addListener(helper, this, peer, invalidationListener);
    }

    @Override
    public void removeListener(InvalidationListener invalidationListener) {
        helper = ProxyExpressionHelper.removeListener(helper, invalidationListener);
    }

    @Override
    public synchronized String toString() {
        Object bean = this.getBean();
        String name = this.getName();
        StringBuilder stringBuilder = new StringBuilder(getClass().getSimpleName());
        stringBuilder.append(" [");
        if (bean != null) {
            stringBuilder.append("bean: ").append(bean).append(", ");
        }

        if (name != null && !name.equals("")) {
            stringBuilder.append("name: ").append(name).append(", ");
        }

        if (peer == null) {
            stringBuilder.append("unresolved, ");
        }

        stringBuilder.append("value: ").append(this.get()).append("]");
        return stringBuilder.toString();
    }

}
