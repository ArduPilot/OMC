/**
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */
// This file was generated by a tool. Do not edit.
//
package org.asyncfx.beans.property;

import java.util.concurrent.Executor;
import javafx.beans.InvalidationListener;
import javafx.beans.value.ChangeListener;
import org.asyncfx.PublishSource;
import org.asyncfx.beans.AccessController;
import org.asyncfx.beans.SubInvalidationListener;
import org.asyncfx.beans.value.SubChangeListener;

@PublishSource(module = "openjfx", licenses = "intel-gpl-classpath-exception")
public class ReadOnlyAsync${boxedType}Wrapper$!{genericType} extends SimpleAsync${boxedType}Property$!{genericType} {

    private final ReadOnlyAsyncPropertyImpl readOnlyProperty = new ReadOnlyAsyncPropertyImpl();

    public ReadOnlyAsync${boxedType}Wrapper(Object bean) {
        super(bean);
    }

    public ReadOnlyAsync${boxedType}Wrapper(Object bean, PropertyMetadata<$numberType> metadata) {
        super(bean, metadata);
    }

    public ReadOnlyAsync${boxedType}Property$!{genericType} getReadOnlyProperty() {
        return readOnlyProperty;
    }

    private class ReadOnlyAsyncPropertyImpl extends ReadOnlyAsync${boxedType}Property$!{genericType} {
        @Override
        public long getUniqueId() {
            return ReadOnlyAsync${boxedType}Wrapper.this.getUniqueId();
        }

        @Override
        public $primType getUncritical() {
            return ReadOnlyAsync${boxedType}Wrapper.this.getUncritical();
        }

        @Override
        public $primType get() {
            return ReadOnlyAsync${boxedType}Wrapper.this.get();
        }

        @Override
        public Object getBean() {
            return ReadOnlyAsync${boxedType}Wrapper.this.getBean();
        }

        @Override
        public String getName() {
            return ReadOnlyAsync${boxedType}Wrapper.this.getName();
        }

        @Override
        public PropertyMetadata<$numberType> getMetadata() {
            return ReadOnlyAsync${boxedType}Wrapper.this.getMetadata();
        }

        @Override
        public AccessController getAccessController() {
            return ReadOnlyAsync${boxedType}Wrapper.this.getAccessController();
        }

        @Override
        public void addListener(InvalidationListener listener, Executor executor) {
            ReadOnlyAsync${boxedType}Wrapper.this.addListener(listener, executor);
        }

        @Override
        public void addListener(ChangeListener<? super $numberType> listener, Executor executor) {
            ReadOnlyAsync${boxedType}Wrapper.this.addListener(listener, executor);
        }

        @Override
        public void addListener(ChangeListener<? super $numberType> listener) {
            ReadOnlyAsync${boxedType}Wrapper.this.addListener(listener);
        }

        @Override
        public void addListener(InvalidationListener listener) {
            ReadOnlyAsync${boxedType}Wrapper.this.addListener(listener);
        }

        @Override
        public void removeListener(ChangeListener<? super $numberType> listener) {
            ReadOnlyAsync${boxedType}Wrapper.this.removeListener(listener);
        }

        @Override
        public void removeListener(InvalidationListener listener) {
            ReadOnlyAsync${boxedType}Wrapper.this.removeListener(listener);
        }

#if($boxedType == "Object")
        @Override
        public void addListener(SubInvalidationListener listener) {
            ReadOnlyAsync${boxedType}Wrapper.this.addListener(listener);
        }

        @Override
        public void addListener(SubInvalidationListener listener, Executor executor) {
            ReadOnlyAsync${boxedType}Wrapper.this.addListener(listener, executor);
        }

        @Override
        public void removeListener(SubInvalidationListener listener) {
            ReadOnlyAsync${boxedType}Wrapper.this.removeListener(listener);
        }

        @Override
        public void addListener(SubChangeListener listener) {
            ReadOnlyAsync${boxedType}Wrapper.this.addListener(listener);
        }

        @Override
        public void addListener(SubChangeListener listener, Executor executor) {
            ReadOnlyAsync${boxedType}Wrapper.this.addListener(listener, executor);
        }

        @Override
        public void removeListener(SubChangeListener listener) {
            ReadOnlyAsync${boxedType}Wrapper.this.removeListener(listener);
        }
#end
    }

}
