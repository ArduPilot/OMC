/**
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */
// This file was generated by a tool. Do not edit.
//
package org.asyncfx.beans.property;

import javafx.beans.binding.Bindings;
import javafx.beans.property.Property;
import org.asyncfx.PublishSource;

@PublishSource(module = "openjfx", licenses = "intel-gpl-classpath-exception")
public class UIAsync${boxedType}Property$!{genericType} extends SimpleAsync${boxedType}Property$!{genericType} implements Property<$numberType> {

    public UIAsync${boxedType}Property(Object bean) {
        this(bean, new UIPropertyMetadata.Builder<$numberType>().create());
    }

    public UIAsync${boxedType}Property(PropertyObject bean) {
        this(bean, new UIPropertyMetadata.Builder<$numberType>().create());
    }

    public UIAsync${boxedType}Property(Object bean, UIPropertyMetadata<$numberType> metadata) {
        super(bean, metadata);
    }

    public UIAsync${boxedType}Property(PropertyObject bean, UIPropertyMetadata<$numberType> metadata) {
        super(bean, metadata);
    }

    @Override
    public void overrideMetadata(PropertyMetadata<$numberType> metadata) {
        if (!(metadata instanceof UIPropertyMetadata)) {
            throw new IllegalArgumentException(
                "Metadata can only be overridden with an instance of " + UIPropertyMetadata.class.getSimpleName());
        }

        super.overrideMetadata(metadata);
    }

    @Override
    public void bindBidirectional(Property<$numberType> other) {
        Bindings.bindBidirectional(this, other);
    }

    @Override
    public void unbindBidirectional(Property<$numberType> other) {
        Bindings.unbindBidirectional(this, other);
    }

}
