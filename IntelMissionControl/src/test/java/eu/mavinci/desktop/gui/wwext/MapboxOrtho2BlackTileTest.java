/**
 * Copyright (c) 2020 Intel Corporation
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

package eu.mavinci.desktop.gui.wwext;

import static com.intel.missioncontrol.map.worldwind.layers.MapboxLayer.BLACKTILE_COLOR;
import static com.intel.missioncontrol.map.worldwind.layers.MapboxLayer.getImageColorMatch;

import com.intel.missioncontrol.map.worldwind.layers.MapboxLayer;
import com.intel.missioncontrol.maplayer.FastMercatorTiledImageTestApp;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import org.junit.Test;

public class MapboxOrtho2BlackTileTest {

    @Test
    public void isBlackImage() {}

    // test black tile logic against tile cache generated by MapboxOrtho2
    public static void main(String[] args) {
        // final String path = "C:\\Users\\Max\\AppData\\Local\\Temp\\mercator-map-test";
        String path;

        path = FastMercatorTiledImageTestApp.getTestMapTileCacheDir().getAbsolutePath();
        // or put your path here
        testMapboxCacheDir(path);
        testMapboxCacheDir(path);
    }

    static String getKey(String string) {
        return string.substring(0, string.lastIndexOf('.'));
    }

    static HashMap<String, String> getUrlFromHttpCache(Iterable<File> files) {
        HashMap<String, String> map = new HashMap<>();
        for (File file : files) {
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String url = br.readLine();
                map.put(getKey(file.getName()), url);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return map;
    }

    public static void testMapboxCacheDir(String path) {
        File dir = new File(path);
        File[] files = dir.listFiles();

        List<File> images = Arrays.stream(files).filter(f -> f.getName().endsWith(".1")).collect(Collectors.toList());
        List<File> requests = Arrays.stream(files).filter(f -> f.getName().endsWith(".0")).collect(Collectors.toList());

        HashMap<String, String> cacheUrlMap = getUrlFromHttpCache(requests);
        ArrayList<Tile> tiles = testImages(images);

        BufferedOutputStream out;
        PrintStream printStream = null;
        try {
            Path p = Files.createTempFile("output", ".csv");
            out = new BufferedOutputStream(new FileOutputStream(p.toFile()));
            printStream = new PrintStream(out);
            System.out.println(">> Writing test stats to '" + p.toString() + "'");
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        printStream.println("filename, url, zoom, darkPercent, blackPercent, filesize");
        for (Tile tile : tiles) {
            String url = cacheUrlMap.get(getKey(tile.name));
            String zoom = url.replaceAll(".*/tiles/(\\d+)/(\\d+)/.*", "$2");
            if (tile == null) continue;
            ;
            printStream.printf(
                "%s, %s, %s, %2.1f, %2.1f, %d\n",
                tile.name, url, zoom, tile.info.pctUnderMatch, tile.info.pctMatch, tile.fileSizeByte);
        }

        printStream.close();
    }

    static class Tile {
        String name;
        long fileSizeByte;
        MapboxLayer.ImageInfo info;
    }

    public static ArrayList<Tile> testImages(Collection<File> files) {
        System.out.println(">> scanning " + files.size() + " files...");

        ArrayList<Tile> results = new ArrayList<>();
        ArrayList<Long> times = new ArrayList<>();
        for (File f : files) {
            BufferedImage image;
            try {
                image = ImageIO.read(f);
            } catch (IOException e) {
                e.printStackTrace();
                continue;
            }

            if (image != null) {
                MapboxLayer.ImageInfo info;
                try {
                    // only test fast path
                    if (image.getType() != BufferedImage.TYPE_3BYTE_BGR) continue;

                    long l = System.nanoTime();
                    info = getImageColorMatch(image, BLACKTILE_COLOR);
                    times.add((System.nanoTime() - l) / 1000);
                } catch (RuntimeException e) {
                    System.err.println("error reading " + f + " :" + e.getMessage());
                    continue;
                }

                Tile t = new Tile();
                t.name = f.getName();
                t.fileSizeByte = f.length();
                t.info = info;
                results.add(t);
            }
        }

        long count = results.stream().mapToDouble(t -> t.info.pctMatch).filter(pct -> pct > 50.0).count();

        System.out.println(" number of dark tiles: " + count);
        System.out.println(
            " performance stats (in microseconds): " + times.stream().mapToLong(Long::longValue).summaryStatistics());
        return results;
    }

}
