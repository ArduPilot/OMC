<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="Concrete Image Readers, Filters and Writers" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Image Filters</title>
        <link href="SkinSupport/Slideshow.css" rel="stylesheet" />
        <link href="SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="resources/stylesheets/mattweb.css" rel="stylesheet" />
        <script src="SkinSupport/jquery.min.js" type="text/javascript">
        </script>
        <script src="SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="SkinSupport/MadCapTopicAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="concrete_image_readers_filters_and_writers.htm">Concrete Image Readers, Filters and Writers</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Image Filters</span>
        </div>
        <h2 class="ptdh2"><a name="kanchor50"></a>Image Filters</h2>
        <p>The <code>LTIImageFilter</code> class is derived from the <code>LTIImageStage</code> class and is used as the base class for implementing specific (and generally simple) image transformations. The following image readers are supplied with this SDK:</p>
        <ul>
            <li value="1"><code>LTIAddAlphaFilter</code>:&#160;This class adds an alpha band to an image that does not have one, based on the image's transparency. This is useful for MG4 encoding pipelines.</li>
            <li value="2"><code>LTIBandSelectFilter</code>: This class creates a single image which is a composition of selected bands from a set of source images. It can be used, among other things, to remap the color bands of a single image (formerly <code>LTISampleMapFilter</code>) or to merge several greyscale images into a single image (formerly <code>LTIColorCompositeFilter</code>).</li>
            <li value="3"><code>LTIColorTransformer</code>: changes the colorspace of an image. The supported transforms include transforming to and from RGB, grayscale, and CMYK.</li>
            <li value="4"><code>LTICropFilter</code>: crops the image to a smaller width and height. Note that this is a reduction in image size; this is a true crop, so some data will be lost.</li>
            <li value="5"><code>LTIDynamicRangeFilter</code>: adjusts the sample values of the image to fit the given dynamic range by scaling the values by appropriate amounts. This is useful as a preprocessing step to displaying datasets that don't use the full precision of their datatypes, for example 7- or 12-bit data.</li>
            <li value="6"><code>LTIEmbeddedImage</code>: creates a new image of the given size, containing the input image "embedded" within it. This class is used to make an image "larger" by increasing its width and height without actually stretching the image itself, for example to place an image on a larger "canvas" so as to provide it with a larger background. (This class is used by the <code>LTIMosaicFilter</code> class to simplify certain computations by making all the input images map to the same underlying grid shape and size.)</li>
            <li value="7"><code>LTIMosaicFilter</code>: creates a single mosaicked image from a set of input images. The set of input images are all assumed to be in the same coordinate space.</li>
            <li value="8"><code>LTIMultiresFilter</code>: extends the magnification range of an image to allow decodes at different resolutions than the image stage would normally allow. Note that this class is not the same as the <code>LTIStaticZoomFilter</code> class, which scales the magnification statically for the pipeline when initially constructed; this class allows for the zoom level to be extended for an individual decode operation.</li>
            <li value="9"><code>LTIStaticZoomFilter</code>: magnifies the image by a fixed amount. In effect this simply changes the width and height of the image statically, i.e. for the life of the pipeline.</li>
            <li value="10"><code>LTITranslationFilter</code>: translates (moves) the geo coordinates of the image.</li>
            <li value="11"><code>LTIViewerImageFilter</code>: performs certain datatype and colorspace transforms on an image to make it more readily displayable. This class wraps the <code>LTIDataTypeTransformer</code>, <code>LTIColorTransformer</code>, and <code>LTIDynamicRangeFilter</code> classes in order to transform the input image into an 8-bit datatype with colorspace grayscale or RGB, as this is the format required by most display engines.</li>
            <li value="12"><code>LTIWatermarkFilter</code>: inserts a watermark image onto the current image stage at a given position. The "watermark" is represented as an input image stage and must have the same pixel properties (colorspace, datatype, etc.) as the image it is to be inserted into.</li>
        </ul>
        <h6 class="h7">Examples</h6>
        <p>The <a href="ReferenceManual/index.html" target="_blank" class="interTopic2">Reference Manual</a> contains several examples of working with image filters, including code showing how to insert a filter into an image pipeline and how to derive your own simple filter from <code>LTIImageFilter</code>.</p>
        <p>&#160;</p>
        <script type="text/javascript" src="SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>